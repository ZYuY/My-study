用继承来实现线性表中顺序表和链表的插入：
```
public class List {
    public int size=0;

    public void push(int index,int element){//线性表根据下标插入
        System.out.println("没实现");
    }
    public void pushfront(int element){//头插
        push(0,element);
    }
    public void pushback(int element){//尾插
        push(size,element);
    }

```
顺序表
```
import java.util.Arrays;
public class ArrayList extends List {
    int []array=new int[10];
    @Override
    public void push(int index, int element) {
       for(int i=size;i>index;i--){
           array[i]=array[i-1];
       }
       array[index]=element;
       size++;
       int []a=Arrays.copyOfRange(array,0,size);
       System.out.println(Arrays.toString(a));//打印
    }
    public static void main(String[]args){//测试
        ArrayList list=new ArrayList();
        list.pushfront(1);
        list.pushfront(2);
        list.pushback(3);
        list.pushback(8);
        list.push(2,10);
    }
}
```
链表
```
import java.util.Arrays;
class Node{
    int val;
    Node next;
    Node(int val){
        this.val=val;
    }
}
public class LinkedList  extends List{
    Node head=null;

    @Override
    public void push(int index, int element) {
        Node node=new Node(element);
      if(index==0){//头插
          node.next=head;
          head=node;
      }else if(index==size){//尾插
          Node last=head;
          while(last.next!=null){
              last=last.next;
          }
          last.next=node;
          node.next=null;
      }else{//中间插
          Node pre=head;
          for(int i=0;i<index-1;i++){
              pre=pre.next;
          }
          node.next=pre.next;
          pre.next=node;
      }
      size++;


      int []a=new int[size];
      Node cur=head;
      int i=0;
      while(cur!=null){//把链表弄到数组中，容易打印
          a[i]=cur.val;
          i++;
          cur=cur.next;
      }
      System.out.println(Arrays.toString(a));
    }
    public static void main(String[] args) {//测试
        LinkedList list = new LinkedList();
        list.pushback(1);
        list.pushback(2);
        list.pushback(3);
        list.pushfront(10);
        list.pushfront(20);
        list.pushfront(30);
        list.push(3, 100);
    }
}

```
