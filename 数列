## 题目
给定一个正整数k(3≤k≤15),把所有k的方幂及所有有限个互不相等的k的方幂之和构成一个递增的序列，例如，当k=3时，这个序列是：
　　1，3，4，9，10，12，13，…
　　（该序列实际上就是：30，31，30+31，32，30+32，31+32，30+31+32，…）
　　请你求出这个序列的第N项的值（用10进制数表示）。
　　例如，对于k=3，N=100，正确答案应该是981。
输入格式
　　只有1行，为2个正整数，用一个空格隔开：
　　k N
　　（k、N的含义与上述的问题描述一致，且3≤k≤15，10≤N≤1000）。
输出格式
　　计算结果，是一个正整数（在所有的测试数据中，结果均不超过2.1*109）。（整数前不要有空格和其他符号）。
样例输入
3 100
样例输出
981

分析
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190527221156949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY4ODUyNw==,size_16,color_FFFFFF,t_70)

我们可以逆向转化，把n转化为二进制数，然后把他当做K进制，然后转化为十进制的数输出就是答案结果了
## 代码

```
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
int main()
{
	int n = 0, k = 0;
	int arr[32] = { 0 };
	int i = 0,j=0;
	long long sum = 0;
	scanf("%d%d", &k,&n);
	while (n != 0)
	{
		arr[i] = n % 2;
		n = n / 2;
		i++;
	}
	for (j=0;j<i;j++)
	{
		sum += arr[j] * pow(k, j);
	}
	printf("%I64d\n", sum);
	system("pause");
	return 0;
}

