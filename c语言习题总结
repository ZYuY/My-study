## 总结
【1】:#define 宏定义 typedef 重命名

```
#define A int *
typedef int * B
A a,b;//这里b不是指针类型
B c,d;
```
【2】c语言中，函数返回值的隐含类型是int型。
【3】表达式计算

```
int a=10;
a+=a*=a-=a/3;//从右往左 a=98
```
【4】=是赋值    ==是相等   if(！0)执行语句

```
int  a=5;
if(a=0)
a=a-10;
else
printf("%d",a++);//a++=0,a=1;注意a++,a的值
```
【5】野指针 和 空指针
空指针是 指向地址为0的指针
野指针并不仅仅是未初始化的指针，有三种情况：
1，指针变量未初始化
2，指针释放之后未置空
3，返回指向栈内存的指针
【6】strlen   sizeof
strlen 以\0结尾，不包括\0
sizeof按字节求所占内存的大小,包括\0
strcpy遇到\0就结束拷贝
```
char a[]="hello\0world";
char b[15]={0};
strcpy(b,a);
strlen(a);//5
strlen(b);//5
sizeof(a);//12  末尾还有个\0
sizeof(b);//15   定义数组时已经给它开辟了大小
```
【7】sizeof和&情况下，数组名代表整个数组，其余都代表数组首元素的地址。
【8】操作符优先级
（） [ ] .-> ++  -- 后缀自减 ! 逻辑反~ 按位取反+ 单目，表示正值 + - 单目，表示负值 -++ 前缀自增 -- 前缀自减 * 间接访问 & 取地址sizeof取长度，以字节表 示* 乘法 / 除法 % 整数取余 + 加法 - 减法 << 左移位>> 右移位 > 大于 >= 大于等于< 小于 <= 小于等于 == 等于!= 不等于& 位与 ^ 位异或 | 位或 && 逻辑与|| 逻辑或？： 条件操作符= 赋值 += 
-=*= /=%= <<= >>= &=^= |= ， 、
【9】形参改变不会影响实参
【10】

```
int *p=null;
//并不代表*p=0,而是所指向的地址为0
```
【11】

```
for(m=0,n=-1;n=0;m++,n++)
n++;//循环体一次也不执行
```
【12】

```
typedef char a[255]; //字符数组
a s;//字符数组变量
```
【13】数组传参要发生降维，降维成指针

```
void fun(char a[2])
{
int m=sizeof(a);//a是指针4
int n=strlen(a);//5
printf("%d %d\n",m,n);
}
in main()
{
char str[]="hello";
fun(str);
}
```
【15】
栈存放的是局部变量
堆存放的是全局变量，静态变量
【16】
w: 为了输出数据，打开一个文本文件
wb:为了输出数据，打开一个二进制文件
w+:为了读和写，新建一个文本文件
wb+:为了读和写，新建一个二进制文件
【17】
后面b指针发生了改变，所以前面b也会发生变化
```
int a[]={6,7,8,9,10};
int *b=a;
*(p++)+=123;
printf("%d,%d",*b,*(++b));//8，8
```
【18】
sizeof()里面的式子不计算
```
int i=10;
long long t=sizeof(i++);//4
printf("%d",i);//10
```
